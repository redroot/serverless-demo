service: likes-backend

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, "dev"}
  profile: serverless-demo
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  create:
    handler: handler.create
    name: ${self:provider.stage}-create
    events:
      - http:
          path: likes
          method: post
          cors: true
  list:
    handler: handler.list
    name: ${self:provider.stage}-list
    events:
      - http:
          path: likes
          method: get
          cors: true

resources:
  Resources:
    LikesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
        -
          AttributeName: "user_id"
          AttributeType: S
        -
          AttributeName: "film_id"
          AttributeType: S
        KeySchema:
        -
          AttributeName: "user_id"
          KeyType: HASH
        -
          AttributeName: "film_id"
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
